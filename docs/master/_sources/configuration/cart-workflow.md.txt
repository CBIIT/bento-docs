# Cart Workflow



## Introduction

The cart workflow is a mechanism for users to generate a manifest for working with case files.

![File-centric Cart](../assets/fileCentric-Cart.png)

**Cart Workflow**. Displayed are the configurable components of the file-centric Cart.

<p>&nbsp;</p>

## Prerequisites
1. Fork the GitHub repo `https://github.com/CBIIT/bento-frontend` (representing your GitHub username as `YOUR-USERNAME`)
2. Create a local clone of your fork into a local directory, represented here as `$(src)`.

<p>&nbsp;</p>

## Customizing the Cart Workflow: 

The configuration for the Cart page is found in the javascript file: `bento-frontend/src/bento/fileCentricCartWorkflowData.js`



### Page Properties

The Page-level properties are configured using the following fields the `myFilesPageData` object: (e.g. `export const myFilesPageData = {` )

Page Cart Table Wrapper Component:
Wrapper components provides components like 'ADD_ALL_FILES', 'ADD_SELECETD_FILES', 'COMMENT_INPUT' and 'DOWNLOAD_MANIFEST' button. Custome element can also to configured with wrapper component.

```
Reference - TabPanel.js (bento-frontend)

import { 
  TableContextProvider,
  TableView,
  Wrapper,
} from '@bento-core/paginated-table';

<TableContextProvider>
  <Wrapper
    wrapConfig={configWrapper(config, wrapperConfig)}
    customTheme={customTheme}
    section={config.name}
  >
    <Grid container>
      <Grid item xs={12} id={config.tableID}>
        <TableView
          // props
          ...
        />
      </Grid>
    </Grid>
  </Wrapper>
</TableContextProvider>

//child component

import { TableContext } from 'bento-core';

const tableContext = useContext(TableContext);

```
Wrapper Component Configuration

Section:
Name of the page ('cartFile')

Page Wrapper Items:
* **`clsName`**: class name for outer container (e.g. "Cart >")
* **`size`**: container size
* **`container`**: feature of the container
* **`items`**: defined components (icon, text input, button) of the container
* **`paginatedTable`**: position paginated table component based on index
* **``**: wrapper config item displays component in the order of the cofiguration.

Cart Icon table header component:
* **`clsName`**: class name for component
* **`type`**: component type (icon, text input, button)
* **`text`**: text value 
* **`src`**: image path url
* **`alt`**: image tag

Download Button Items:

* **`title`**: Text to appear on download button (e.g. "DOWNLOAD MANIFEST")
* **`type`**: component type (icon, text input, button)
* **`role`**: refers to active associate to button (btnTypes.DOWNLOAD_MANIFEST)
* **`clsName`**: class name for component to override style using Themeprovider
* **`tooltipCofig`**: tooltip Message that appears for the downloadButton (e.g. 'To access and analyze files: select and ...')
  * **`icon`**: image path
  * **`alt`**: image path 
  * **`clsName`**: tooltip class 
  * **`arrow`**: set boolean to display
  * **`styles`**: configure styles

Table Component Wrapper Config:

* **`container`**: component for table component
* **`paginatedTable`**: set True to display table component


The generated manifest will have a description field to help users remember key information. The default text that appears in the description's textArea can be configured:

Comment Input/text Component:
* **`type`**: component type (types.TEXT_INPUT)
* **`clsName`**: class name for component
* **`placeholder`**: Default text message that appears in the textArea (e.g. 'Please add a description for the ...')

```
import { types, btnTypes } from '@bento-core/paginated-table';
import { myFilesPageData, tooltipContent } from '../../../bento/fileCentricCartWorkflowData';

export const wrapperConfig = [
  {
    container: 'outer_layout',
    size: 'xl',
    clsName: 'container_outer_layout',
    items: [
      {
        clsName: 'cart_icon',
        type: types.ICON,
        src: myFilesPageData.headerIconSrc,
        alt: myFilesPageData.headerIconAlt,
      },
      {
        clsName: 'cart_header_text',
        text: 'Cart >',
        type: types.TEXT,
      },
      {
        clsName: 'cart_sel_files_text',
        text: 'Selected Files',
        type: types.TEXT,
      },
    ],
  },
  {
  container: 'buttons',
  size: 'xl',
  clsName: 'container_header',
  items: [
    {
      title: 'DOWNLOAD MANIFEST',
      clsName: 'download_manifest',
      type: types.BUTTON,
      role: btnTypes.DOWNLOAD_MANIFEST,
      btnType: btnTypes.DOWNLOAD_MANIFEST,
      tooltipCofig: tooltipContent,
    }],
},
{
  container: 'paginatedTable',
  paginatedTable: true,
},
{
  container: 'buttons',
  size: 'xl',
  clsName: 'container_footer',
  items: [
    {
      clsName: 'manifest_comments',
      type: types.TEXT_INPUT,
      placeholder: myFilesPageData.textareaPlaceholder,
    }],
}];

export const tooltipContent = {
  icon: '',
  alt: 'tooltipIcon',
  clsName: 'tooltip_icon',
  myFiles: 'To access and analyze files: select and remove unwanted files,....',
  arrow: true,
  styles: {
    border: '#03A383 1px solid',
  },
};

```

CustomTheme:
Themeprovider is used to configure styling of the components with in wrapper component. Based on the class name (clsName) configure to different component, themeprovider can be used to override the style of particular component.

```
export const customTheme = {
  MuiContainer: {
    root: {
      paddingTop: '5px',
      '&.container_outer_layout': {
        // styles
        '& img': {
          //styles 
        },
        '& span': {
          // styles
          '&.cart_header_text': {
            // styles
          },
          '&.cart_sel_files_text': {
            // styles
          },
        },
      },
    },
  },
}
```

### File Table Configuration:

* Set the field `title` to the the title of your table.
* Set the field `defaultSortField`: The field used as the default sort field; it must be one of the `dataField` listed in `columns`
* Set the field `defaultSortDirection` to the sort order of your choice. Valid values are 'asc' (ascending) and 'desc' (descending).
* Set the field `api` GET_MY_CART_DATA_QUERY a GraphQL query which provides data for the cart table.
* Set the field `paginationAPIField` to access the respose data provided by GET_MY_CART_DATA_QUERY.
```
//example response
{"data": {"filesInList": [list of response] }}

paginationAPIField = filesInList
```
(Note: If GraphQL query does not contain access key and provides response as below, there is no need set paginationAPIField)
```
//example response
{"data": [list of response] }
```
* Set the field `tableMsg` to display empty table.

```javascript
export const tableConfig = {
  // Value must be one of the 'dataField's in "columns"
  defaultSortField: 'file_name',
  // 'asc' or 'desc'
  defaultSortDirection: 'asc', 
  // Value must be one of the 'dataField's in "columns"
  defaultSortField: 'file_name',
  // 'asc' or 'desc'
  api: GET_MY_CART_DATA_QUERY,
  defaultSortDirection: 'asc',
  paginationAPIField: 'filesInList',
  columns: [
    {
      dataField: 'file_name',
      header: 'File Name',
      display: true,
      tooltipText: 'sort',
    },
    {
      dataField: 'file_size',
      header: 'Size',
      // set formatBytes to true to display file size (in bytes) in a more human readable format
      display: true,
      dataFormatType: dataFormatTypes.FORMAT_BYTES,
      cellType: cellTypes.FORMAT_DATA,
      tooltipText: 'sort',
    },
    ...
  ],
  tableMsg: {
    noMatch: 'Sorry, no matching records found',
  },
}
```

Columns:

The columns that appear in the file table are configured in list `columns`.  There is a maximum limit of 10 columns. If more than 10 columns are added, Bento will display the first 10 columns without an error or warning message. The top-down order of columns will be displayed left to right on the UI.  Each entry is described by the following fields:

* `dataField`: specifies what data appears in the column, field must be from the GraphQL API query

* `header`: Heading Text for column

* `tooltipText`: tooltip text for column header

* `display`: Show  or Hide column 

  * must be `true`  or `false`

* `dataFormatType`: Format data to bytes, MB or GB.
  * format types decleared by dataFormatTypes (bento-core/table)

* `cellType`: indicates column data to be format.


### File Table Data (GraphQL)

The data is retrieved using a GraphQL Query used in the Dashboard page: 

```javascript
// code placeholder
export const GET_MY_CART_DATA_QUERY = gql`
query filesInList($file_ids: [String]) {
    filesInList(file_ids: $file_ids) {
        study_code
        subject_id
        file_name
        file_type
        association
        file_description
        file_format
        file_size
        file_id
        md5sum
    }
}`;
```

### Configuring the Navigation Bar for the Cart Workflow

### Navigation Bar Link Text
To configure the link text that appears on the nav bar:

1. Under `navBarCartData`, 
2. set the field `cartLabel` to have the desired text value

For example, to have the link appear as 'MY FILES':

```javascript
export const navBarCartData = {
  cartLabel: 'MY FILES',
```


### Navigation Bar Icon
To configure the icon that appears on the menu bar:

1. Under `navarBarCartData`, 
2. set the field `cartIcon` to point to the new desired image file, the value should be a URL
3. Update the field `cartIconAlt` to an appropriate "alternate text" description for the icon

For example, to have the icon to use the file `MyIcon.svg` instead of file `Icon-MyCases.svg`

```javascript
export const navBarCartData = {
  ...
  cartIcon: 'https://raw.githubusercontent.com/YOUR-USERNAME/bento-frontend/master/src/assets/icons/MyIcon.svg',
  cartIconAlt: 'my_icon_logo',
};
```


<p>&nbsp;</p>

